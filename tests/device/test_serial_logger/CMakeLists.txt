##########################################################################################
# Functions and macros definition
##########################################################################################

#! CreateSerialLoggerTestExpectingOutput: Creates positive serial logger test which checks for output from serial.
#
# Creates a test, that captures output from serial log and checks whether the output from serial port matches
# 'expected_output'. The 'expected_output' is expected by the code defined in the test file, which shall
# be defined in current directory and have the name <test_name>.cpp.
#
# \arg:test_name                Test name, which can be invoked with CTest by name test_serial_logger_<test_name>.
# \arg:expected_output_regex    The output from serial port, which is expected to be generated by the test.
#                               It is regex propagated to CMake's PASS_REGULAR_EXPRESSION.
#
function(CreateSerialLoggerTestExpectingOutput test_name expected_output_regex)

    set(test_target_name ${test_name})
    set(test_source_file ${test_name}.cpp)
    set(test_name test_serial_logger_${test_name})

    add_executable(${test_target_name} ${test_source_file})
    PromoteToDeviceTestExecutable(${test_target_name} ${test_name} NO_UNITY_OUTPUT)

    target_link_libraries(${test_target_name} PRIVATE serial_logger)

    AddDeviceTest(${test_target_name} ${test_name} PASS_REGEX ${expected_output_regex})

    set_tests_properties(${test_name} PROPERTIES LABELS serial_logger)

endfunction()

##########################################################################################
# Main script
##########################################################################################

add_executable(test_serial_logger test_serial_logger.cpp)
PromoteToDeviceTestExecutable(test_serial_logger test_serial_logger)
target_link_libraries(test_serial_logger PRIVATE serial_logger)

CreateSerialLoggerTestExpectingOutput(simple_log "INFO: some simple log")

CreateSerialLoggerTestExpectingOutput(multiple_logs
    "INFO: some log 1.*INFO: some log2.*INFO: some log 3.*INFO: some log 4.*INFO: some log 5.*INFO: some log 6.*")

CreateSerialLoggerTestExpectingOutput(enormous_number_of_logs_doesnt_clog
    "(INFO: some log, which is not so long\\r\\n){1000}")

CreateSerialLoggerTestExpectingOutput(float_printed "INFO: 3.444\\r\\nINFO: 312.445")

CreateSerialLoggerTestExpectingOutput(unsigned_char_printed_as_hex_char "INFO: 0x02\\r\\nINFO: 0xFA")

CreateSerialLoggerTestExpectingOutput(unsigned_int_printed "INFO: 10000")

CreateSerialLoggerTestExpectingOutput(int_printed "INFO: 32000\\r\\nINFO: -32311")

CreateSerialLoggerTestExpectingOutput(char_printed "INFO: a *")

CreateSerialLoggerTestExpectingOutput(verbosities_printed "INFO: info\\r\\nWARNING: warning\\r\\nERROR: error\\r\\n")
